server:
  port: 8802
spring:
  application:
    name: customer-service
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
  instance:
    hostname: localhost
    instance-id: ${eureka.instance.hostname}:${spring.application.name}:${server.port}
feign:
  hystrix:
    enabled: true
hystrix:
  command:
    default:  #全局默认配置,也可以换成单个方法控制,把default换成方法名即可
      circuitBreaker: #断路器
        enabled: true
        requestVolumeThreshold: 10  #失败次数达到10次则会开启断路器
        errorThresholdPercentage: 60  #失败率达到60%则会开启断路器
        sleepWindowInMilliseconds: 10000    #断路器开启后，10秒后会尝试半开，放部分流量过去重试
      execution:
        isolation:  #隔离级别
          Strategy: thread  #线程池隔离《默认策略》
          thread:
            timeoutInMilliseconds: 1000 #调用超时时间
      fallback:
        isolation:  #隔离级别
          semaphore:  #信号量隔离
            maxConcurrentRequests: 10  #最大并发数

#信号量隔离和线程池隔离的区别
#1.信号量隔离是在调用线程上执行，不会开启新的线程，所以不会有线程切换的开销，但是会有并发数的限制
#2.线程池隔离是在新的线程上执行，会有线程切换的开销，但是不会有并发数的限制
#3.信号量隔离的线程池是共享的，线程池隔离的线程池是独享的
#4.线程池隔离比较彻底,不会因为某个方法的调用超时导致整个线程挂起,而信号量隔离会
#5.线程池隔离可以对调用的方法进行限流,信号量隔离只能对整个类进行限流
#6.并发量不高的情况下,信号量隔离比较好,并发量高的情况下,线程池隔离比较好